0. Hey, i have configured google Oauth2 Console Credential and i have client_secret in my project root folder, there are some information to use google Oauth2, so I wanna load it to .env file in src/api
Install nodemailer, google auth library to prepare for sending email functionality

1. Sign In Screen
At the bottom of the Password Field in Sign In screen, there is a "Forgot Password?" link.

When the user taps on "Forgot Password?", they are navigated to the Forgot Password screen.

2. Forgot Password Screen
This screen asks the user to enter the email address they registered with.

There is a TextInput for entering the email.

There is a Submit button.

Functionality:

When the user taps on Submit:

The app sends the email to the backend (POST /auth/forgot-password).

The server checks if the email exists in the MySQL database:

✅ If found: It generates a 6-digit OTP, sends it to the email using Nodemailer, and responds with success.

❌ If not found: It returns an error message like "Email not found".

If the response is success, the app navigates to the OTP Verification screen, passing the entered email.

3. OTP Verification Screen
This screen has 6 input boxes for the OTP code, a countdown timer, and a resend button.

Features:

OTP Input: 6 input fields for a 6-digit code.

Countdown Timer: Starts from, e.g., 60 seconds. During countdown, "Resend" button is disabled.

Resend OTP: Enabled only after countdown ends.

Note: The email cannot be changed here. It is prefilled and non-editable.

Functionality:

When the user enters the correct OTP and taps Verify:

The app sends a request (POST /auth/verify-otp) with email and OTP.

The server checks if the OTP matches and hasn’t expired.

✅ If correct: Navigates to the Reset Password screen.

❌ If incorrect or expired: Shows an appropriate error.

If the user taps Resend OTP:

A new OTP is generated and sent again via Nodemailer.

Timer resets.

4. Reset Password Screen
This screen allows the user to enter a new password and confirm it.

Features:

2 fields: New Password, Confirm Password.

A small suggestion box (non-interactive), e.g.:

At least 8 characters

At least 1 uppercase letter

At least 1 number

At least 1 special character

Functionality:

When both fields match and meet the criteria, the user taps Submit.

The app sends a request (POST /auth/reset-password) with the new password and email.

The backend:

Hashes the new password using bcrypt (or similar).

Updates the password in the MySQL database.

Clears the OTP from the system.

The app then navigates back to the Sign In screen with a success message.

✅ Summary
This flow includes:

Email validation (with existence check)

OTP verification (with timeout + resend)

Secure password reset (with frontend suggestion + backend hashing)

